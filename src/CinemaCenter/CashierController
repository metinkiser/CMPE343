package CinemaCenter;

import javafx.fxml.FXML;
import javafx.scene.control.*;
import javafx.fxml.FXMLLoader;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.HBox;
import javafx.scene.text.Text;
import javafx.scene.layout.VBox;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.stage.Stage;
import java.io.IOException;
import java.util.List;
import java.util.ArrayList;
import java.sql.*;
import java.net.URL;
import java.io.File;

public class CashierController {

    @FXML
    private ComboBox<String> genreComboBox;

    @FXML
    private TextField partialNameField;

    @FXML
    private TextField fullNameField;

    @FXML
    private ListView<Movie> moviesListView;

    @FXML
    private Label errorLabel;

    @FXML
    private Button confirmButton;

    @FXML
    private TextField nameSearchField;

    private Movie selectedMovie;

    @FXML
    public void initialize() {
        // DÜZENLENDİ: Genre ComboBox'ı veritabanından dolduralım + en başa "All categories"
        loadGenresDynamically();

        // Configure ListView
        moviesListView.setCellFactory(param -> new ListCell<>() {
            private final ImageView imageView = new ImageView();
            private final Text title = new Text();
            private final Text genre = new Text();
            private final Text summary = new Text();
            private final HBox content = new HBox(10, imageView, new VBox(title, genre, summary));

            {
                content.setSpacing(10);
                imageView.setFitWidth(80);
                imageView.setFitHeight(120);
            }

            @Override
            protected void updateItem(Movie movie, boolean empty) {
                super.updateItem(movie, empty);
                if (empty || movie == null) {
                    setGraphic(null);
                } else {
                    imageView.setImage(new Image(new File(movie.getPosterPath()).toURI().toString()));
                    title.setText("Title: " + movie.getTitle());
                    genre.setText("Genre: " + movie.getGenre());
                    summary.setText("Summary: " + movie.getSummary());
                    setGraphic(content);
                }
            }
        });
    }

    // EKLENDİ: Veritabanından DISTINCT Genre al, listeye ekle + "All categories" en başta.
    private void loadGenresDynamically() {
        List<String> genres = new ArrayList<>();
        genres.add("All categories"); // en başa ekle

        try (Connection conn = DBUtil.getConnection();
             Statement st = conn.createStatement();
             ResultSet rs = st.executeQuery("SELECT DISTINCT Genre FROM Movies WHERE Genre IS NOT NULL AND Genre<>''")) {
            while (rs.next()) {
                genres.add(rs.getString("Genre"));
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }

        genreComboBox.getItems().clear();
        genreComboBox.getItems().addAll(genres);
    }

    @FXML
    public void onSearchButtonClick() {
        // Get search criteria
        String genre = genreComboBox.getValue();
        String searchName = nameSearchField.getText().trim();

        // "All categories" seçiliyse genre=null yapalım
        if ("All categories".equalsIgnoreCase(genre)) {
            genre = null;
        }

        moviesListView.getItems().clear();

        // searchMovies metodunu güncellenen parametrelerle çağır
        List<Movie> results = MovieDAO.searchMovies(genre, searchName);

        if (results.isEmpty()) {
            errorLabel.setText("No movies found.");
        } else {
            errorLabel.setText("");
            moviesListView.getItems().addAll(results);
        }
    }

    private void showAlert(String title, String content) {
        Alert alert = new Alert(Alert.AlertType.ERROR);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(content);
        alert.showAndWait();
    }

    @FXML
    public void onConfirmButtonClick() {
        selectedMovie = moviesListView.getSelectionModel().getSelectedItem();
        if (selectedMovie == null) {
            showAlert("Error", "Please select a movie to proceed.");
            return;
        }

        try {
            FXMLLoader loader = null;
            String[] possiblePaths = {
                "/CinemaCenter/SelectSession.fxml"
            };

            for (String path : possiblePaths) {
                System.out.println("Trying to load FXML from: " + path);
                URL resource = getClass().getResource(path);
                if (resource != null) {
                    loader = new FXMLLoader(resource);
                    break;
                }
            }

            if (loader == null) {
                // Manuel arama
                File file = new File("src/CinemaCenter/SelectSession.fxml");
                if (file.exists()) {
                    System.out.println("Found FXML file at: " + file.getAbsolutePath());
                    loader = new FXMLLoader(file.toURI().toURL());
                } else {
                    throw new IOException("Could not find SelectSession.fxml in any location");
                }
            }

            Parent root = loader.load();
            SessionSelectionController controller = loader.getController();
            if (controller == null) {
                throw new IOException("Could not load SessionSelectionController");
            }

            controller.setSelectedMovie(selectedMovie);

            Stage stage = new Stage();
            stage.setTitle("Session Selection - " + selectedMovie.getTitle());
            stage.setScene(new Scene(root));
            stage.show();

            ((Stage) confirmButton.getScene().getWindow()).close();

        } catch (IOException e) {
            e.printStackTrace();
            System.err.println("Error details: " + e.getMessage());
            showAlert("Error", "Could not load session selection screen. Please check the logs.");
        }
    }

    public Movie getSelectedMovie() {
        return selectedMovie;
    }

    @FXML
    private void onLogoutClick() {
        try {
            // Login ekranını yükle
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/CinemaCenter/login.fxml"));
            Scene scene = new Scene(loader.load());
            
            // Mevcut pencereyi al ve login ekranını göster
            Stage stage = (Stage) genreComboBox.getScene().getWindow();
            stage.setScene(scene);
            stage.setTitle("Cinema Center Login");
            stage.show();
        } catch (IOException e) {
            e.printStackTrace();
            showAlert("Error", "Could not load login screen.");
        }
    }
}
