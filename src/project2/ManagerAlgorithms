import java.util.*;

/**
 * The `ManagerAlgorithms` class offers a collection of sorting algorithms, measures their execution time, and generates random data for testing. It includes
 * Implementations of Insertion Sort, Heap Sort, Shell Sort, and Radix Sort.
 */
public class ManagerAlgorithms {

    /**
     * Generates a random list of integers.
     *
     * @param size the number of elements in the list
     * @param min the minimum value of elements
     * @param max the maximum value of elements
     * @return a list of random integers
     */
    public static List<Integer> generateRandomList(int size, int min, int max) {
        Random random = new Random();
        List<Integer> list = new ArrayList<>();
        for (int i = 0; i < size; i++) {
            list.add(random.nextInt(max - min + 1) + min);
        }
        return list;
    }

    /**
     * Measures the execution time of a specified sorting algorithm.
     *
     * @param list the list to be sorted
     * @param algorithm the name of the sorting algorithm ("insertion", "heap", "shell", "radix", or "default")
     * @return the execution time in nanoseconds
     */
    public static long measureExecutionTime(List<Integer> list, String algorithm) {
        long startTime = System.nanoTime();
        if (algorithm.equals("insertion")) {
            insertionSort(list);
        } else if (algorithm.equals("heap")) {
            heapSort(list);
        } else if (algorithm.equals("shell")) {
            shellSort(list);
        } else if (algorithm.equals("radix")) {
            radixSort(list);
        } else if (algorithm.equals("default")) {
            Collections.sort(list);
        }
        long endTime = System.nanoTime();
        return endTime - startTime;
    }

    /**
     * Sorts a list using the Insertion Sort algorithm.
     *
     * @param list the list to be sorted
     */
    public static void insertionSort(List<Integer> list) {
        for (int i = 1; i < list.size(); i++) {
            int temp = list.get(i);
            int j = i - 1;
            while (j >= 0 && list.get(j) > temp) {
                list.set(j + 1, list.get(j));
                j--;
            }
            list.set(j + 1, temp);
        }
    }

    /**
     * Sorts a list using the Heap Sort algorithm.
     *
     * @param list the list to be sorted
     */
    public static void heapSort(List<Integer> list) {
        PriorityQueue<Integer> heap = new PriorityQueue<>(list);
        for (int i = 0; i < list.size(); i++) {
            list.set(i, heap.poll());
        }
    }

    /**
     * Sorts a list using the Shell Sort algorithm.
     *
     * @param list the list to be sorted
     */
    public static void shellSort(List<Integer> list) {
        int n = list.size();
        int gap = n / 2;
        while (gap > 0) {
            for (int i = gap; i < n; i++) {
                int temp = list.get(i);
                int j = i;
                while (j >= gap && list.get(j - gap) > temp) {
                    list.set(j, list.get(j - gap));
                    j -= gap;
                }
                list.set(j, temp);
            }
            gap /= 2;
        }
    }

    /**
     * Sorts a list using the Radix Sort algorithm.
     *
     * @param list the list to be sorted
     */
    public static void radixSort(List<Integer> list) {
        int min = Collections.min(list);
        int offset = (min < 0) ? -min : 0;

        for (int i = 0; i < list.size(); i++) {
            list.set(i, list.get(i) + offset);
        }

        int max = Collections.max(list);
        int exp = 1;
        while (max / exp > 0) {
            countingSortByDigit(list, exp);
            exp *= 10;
        }

        for (int i = 0; i < list.size(); i++) {
            list.set(i, list.get(i) - offset);
        }
    }
    /**
     * Helper method for Radix Sort to sort elements by a specific digit.
     *
     * @param list the list to be sorted
     * @param exp the digit's place value to sort by (1 for units, 10 for tens, etc.)
     */
    public static void countingSortByDigit(List<Integer> list, int exp) {
        int n = list.size();
        int[] output = new int[n];
        int[] count = new int[10];

        for (int value : list) {
            int digit = (value / exp) % 10;
            count[digit]++;
        }

        for (int i = 1; i < 10; i++) {
            count[i] += count[i - 1];
        }

        for (int i = n - 1; i >= 0; i--) {
            int digit = (list.get(i) / exp) % 10;
            output[count[digit] - 1] = list.get(i);
            count[digit]--;
        }

        for (int i = 0; i < n; i++) {
            list.set(i, output[i]);
        }
    }

    /**
     * Compares a sorted list to a reference sorted list.
     *
     * @param listToCheck the sorted list to verify
     * @param referenceList the reference sorted list
     * @return true if the lists are identical, false otherwise
     */
    public static boolean isSortingCorrect(List<Integer> listToCheck, List<Integer> referenceList) {
        return listToCheck.equals(referenceList);
    }

    /**
     * Displays a menu for running sorting algorithms and measuring their performance.
     */
    public static void runAlgorithmsMenu() {
        Scanner scanner = new Scanner(System.in);
        while (true) {
            System.out.println("\u001B[35mEnter the array size (from 1000 to 10000):\u001B[0m");
            int size;
            try {
                size = scanner.nextInt();
                if (size < 1000 || size > 10000) {
                    System.err.println("Error: Please enter a number between 1000 and 10000.");
                    continue;
                }
            } catch (InputMismatchException e) {
                System.err.println("Error: Invalid input. Please enter a numeric value.");
                scanner.next();
                continue;
            }

            List<Integer> randomList = generateRandomList(size, -10000, 10000);
            List<Integer> referenceList = new ArrayList<>(randomList);
            Collections.sort(referenceList);

            // Execution time and correctness check
            String[] algorithms = {"insertion", "heap", "shell", "radix"};
            String[] algorithmNames = {"Insertion Sort", "Heap Sort", "Shell Sort", "Radix Sort"};

            for (int i = 0; i < algorithms.length; i++) {
                List<Integer> listCopy = new ArrayList<>(randomList);
                long executionTime = measureExecutionTime(listCopy, algorithms[i]);
                boolean isCorrect = isSortingCorrect(listCopy, referenceList);
                String correctnessMessage = isCorrect ? "\u001B[32mCorrect - True\u001B[0m" : "\u001B[31mIncorrect\u001B[0m";
                System.out.println(algorithmNames[i] + ": " + executionTime + " nanoseconds. " + correctnessMessage);
            }

            // Execution time for Collections.sort()
            List<Integer> listCopy = new ArrayList<>(randomList);
            long defaultSortTime = measureExecutionTime(listCopy, "default");
            System.out.println("Collections.sort(): " + defaultSortTime + " nanoseconds. \u001B[32mCorrect - True\u001B[0m (Reference)");

            String choice;
            while (true) {
                System.out.println("\u001B[35mDo you want to try again?\u001B[0m (Y/N)");
                choice = scanner.next();
                if (choice.equalsIgnoreCase("Y") || choice.equalsIgnoreCase("N")) {
                    break;
                } else {
                    System.err.println("Invalid input. Please enter Y or N.");
                }
            }

            if (choice.equalsIgnoreCase("N")) {
                break;
            }
        }
    }

    public static void main(String[] args) {
        runAlgorithmsMenu();
    }
}


