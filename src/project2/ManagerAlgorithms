
import java.util.*;

public class ManagerAlgorithms {

    // Generates a random array
    public static int[] generateRandomArray(int size, int min, int max) {
        Random random = new Random();
        int[] array = new int[size];
        for (int i = 0; i < size; i++) {
            array[i] = random.nextInt(max - min + 1) + min;
        }
        return array;
    }

    // measuring the execution time of an algorithm
    public static long measureExecutionTime(int[] array, String algorithm) {
        long startTime = System.nanoTime();
        if (algorithm.equals("insertion")) {
            insertionSort(array);
        } else if (algorithm.equals("heap")) {
            heapSort(array);
        } else if (algorithm.equals("shell")) {
            shellSort(array);
        } else if (algorithm.equals("radix")) {
            radixSort(array);
        } else if (algorithm.equals("default")) {
            Arrays.sort(array);
        }
        long endTime = System.nanoTime();
        return endTime - startTime;
    }

    // insertionSort
    public static void insertionSort(int[] array) {
        for (int i = 1; i < array.length; i++) {
            int temp = array[i];
            int j = i - 1;
            while (j >= 0 && array[j] > temp) {
                array[j + 1] = array[j];
                j--;
            }
            array[j + 1] = temp;
        }
    }

    // Heap Sort
    public static void heapSort(int[] array) {
        PriorityQueue<Integer> heap = new PriorityQueue<>();
        for (int value : array) {
            heap.add(value);
        }
        int i = 0;
        while (!heap.isEmpty()) {
            array[i] = heap.poll();
            i++;
        }
    }

    // Shell sort
    public static void shellSort(int[] array) {
        int n = array.length;
        int gap = n / 2;
        while (gap > 0) {
            for (int i = gap; i < n; i++) {
                int temp = array[i];
                int j = i;
                while (j >= gap && array[j - gap] > temp) {
                    array[j] = array[j - gap];
                    j -= gap;
                }
                array[j] = temp;
            }
            gap /= 2;
        }
    }

    // Radix Sort
    public static void radixSort(int[] array) {

        int min = Integer.MAX_VALUE;
        for (int value : array) {
            if (value < min) {
                min = value;
            }
        }


        int offset = (min < 0) ? -min : 0;
        for (int i = 0; i < array.length; i++) {
            array[i] += offset;
        }


        int max = Integer.MIN_VALUE;
        for (int value : array) {
            if (value > max) {
                max = value;
            }
        }

        int exp = 1;
        while (max / exp > 0) {
            countingSortByDigit(array, exp);
            exp *= 10;
        }


        for (int i = 0; i < array.length; i++) {
            array[i] -= offset;
        }
    }


    public static void countingSortByDigit(int[] array, int exp) {
        int n = array.length;
        int[] output = new int[n];
        int[] count = new int[10];


        for (int value : array) {
            int digit = (value / exp) % 10;
            count[digit]++;
        }


        for (int i = 1; i < 10; i++) {
            count[i] += count[i - 1];
        }


        for (int i = n - 1; i >= 0; i--) {
            int digit = (array[i] / exp) % 10;
            output[count[digit] - 1] = array[i];
            count[digit]--;
        }


        for (int i = 0; i < n; i++) {
            array[i] = output[i];
        }
    }

    // Menu for running algorithms
    public static void runAlgorithmsMenu() {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter the array size (from 1000 to 10000):");
        int size = scanner.nextInt();
        if (size < 1000 || size > 10000) {
            System.out.println("Invalid size. Try again.");
            return;
        }

        int[] randomArray = generateRandomArray(size, -10000, 10000);

        // execution time of each algorithm
        int[] arrayCopy;
        System.out.println("Sorting in progress...");
        arrayCopy = randomArray.clone();
        System.out.println("Insertion Sort: " + measureExecutionTime(arrayCopy, "insertion") + " nanosecond");

        arrayCopy = randomArray.clone();
        System.out.println("Heap Sort: " + measureExecutionTime(arrayCopy, "heap") + " nanosecond");

        arrayCopy = randomArray.clone();
        System.out.println("Shell Sort: " + measureExecutionTime(arrayCopy, "shell") + " nanosecond");

        arrayCopy = randomArray.clone();
        System.out.println("Radix Sort: " + measureExecutionTime(arrayCopy, "radix") + " nanosecond");

        arrayCopy = randomArray.clone();
        System.out.println("Collections.sort(): " + measureExecutionTime(arrayCopy, "default") + " nanosecond");
    }

    public static void main(String[] args) {
        runAlgorithmsMenu();
    }
}


